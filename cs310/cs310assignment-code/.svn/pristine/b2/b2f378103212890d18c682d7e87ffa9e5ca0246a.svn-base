#!/usr/bin/env python
import re
import models

class StageReader:
  def __init__(self, file):
    self.graph = self.stages(models.Graph(), file) #initialize empty graph.
    self.adjMatrix = self.createAdjMatrix() #create the adjacency matrix.

  def stages(self, graph, file):
    name = ""
    p = re.compile('#.*'); #compile a patttern to look for comments.
    for line in open(file, 'r'):
      line = p.sub('', line.strip())
      nodeName = re.match(r"(?P<name>(!)?\w+$)", line)
      outLine = re.match(r"^> (?P<next>\w+) (?P<description>.*)", line)
      if line == "":
        continue
      if nodeName:
        name = nodeName.group("name")
        graph.node(name) #create new node.
      elif outLine:
        models.Edge(graph.node(name),graph.node(outLine.group("next")), outLine.group("description"))
      elif not outLine:
        graph.node(name).also(line) #add node description.
    return graph
  
  def createAdjMatrix(self):
    ln = len(self.graph.nodes)
    matrix = [[0 for col in range(ln)] for row in range(ln)] #create blank matrix
    for node in self.graph.nodes: #for each node in the graph
      for out in node.out: #for each way out in the node
        matrix[node.id][out.there.id] += 1
    return matrix
  
  def printMatrix(self):
    symbols=list("0123456789abcdefghojklmnopqrstuvwzyz=?+*-@$:;ABCDEFGHIJKLMNOPQRSTUVWYZ")
    ln = len(self.adjMatrix)
    for r in range(ln):
      print symbols[r+1]
    print "\n"
    for row in range(0,ln):
      for col in range(0,ln):
        print self.adjMatrix[row][col],
      print "", symbols[row+1], self.graph.nodes[row].name,"\n"

def match(string, edges):
  words = [edge.there.name for edge in edges if(re.match("^"+string, edge.there.name))]
  if len(words) > 1:
    print "\nString matched more than one path."
    return None
  if not words:
    print "\nString matched no path."
    return None
  return words

reader = StageReader("./stages/1a")
reader.printMatrix()

current = reader.graph.nodes[0]
while True:
  print "\n"+current.description
  if(len(current.out) > 0):
    for edge in current.out:
      print "(",edge.there.name,")", edge.description
    next = raw_input("\nWhat would you like to do next? > ").strip()
    matched = match(next, current.out)
    if not matched:
      current = current;
    else:
      current = reader.graph.node(matched[0])
  else:
    print "Congratulations, you have finished the game!"
    break
